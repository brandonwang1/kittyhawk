// generated by cdk8s
import { ApiObject } from 'cdk8s';
import { Construct } from 'constructs';

/**
 * A CertificateRequest is used to request a signed certificate from one of the configured issuers. 
 All fields within the CertificateRequest's `spec` are immutable after creation. A CertificateRequest will either succeed or fail, as denoted by its `status.state` field. 
 A CertificateRequest is a 'one-shot' resource, meaning it represents a single point in time request for a certificate and cannot be re-used.
 *
 * @schema CertificateRequest
 */
export class CertificateRequest extends ApiObject {
  /**
   * Defines a "CertificateRequest" API object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: CertificateRequestOptions = {}) {
    super(scope, name, {
      ...options,
      kind: 'CertificateRequest',
      apiVersion: 'cert-manager.io/v1alpha2',
    });
  }
}

/**
 * A CertificateRequest is used to request a signed certificate from one of the configured issuers. 
 All fields within the CertificateRequest's `spec` are immutable after creation. A CertificateRequest will either succeed or fail, as denoted by its `status.state` field. 
 A CertificateRequest is a 'one-shot' resource, meaning it represents a single point in time request for a certificate and cannot be re-used.
 *
 * @schema CertificateRequest
 */
export interface CertificateRequestOptions {
  /**
   * @schema CertificateRequest#metadata
   */
  readonly metadata?: any;

  /**
   * Desired state of the CertificateRequest resource.
   *
   * @schema CertificateRequest#spec
   */
  readonly spec?: CertificateRequestSpec;

}

/**
 * Desired state of the CertificateRequest resource.
 *
 * @schema CertificateRequestSpec
 */
export interface CertificateRequestSpec {
  /**
   * The PEM-encoded x509 certificate signing request to be submitted to the CA for signing.
   *
   * @schema CertificateRequestSpec#csr
   */
  readonly csr: string;

  /**
   * The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types.
   *
   * @schema CertificateRequestSpec#duration
   */
  readonly duration?: string;

  /**
   * IsCA will request to mark the certificate as valid for certificate signing when submitting to the issuer. This will automatically add the `cert sign` usage to the list of `usages`.
   *
   * @schema CertificateRequestSpec#isCA
   */
  readonly isCA?: boolean;

  /**
   * IssuerRef is a reference to the issuer for this CertificateRequest.  If the 'kind' field is not set, or set to 'Issuer', an Issuer resource with the given name in the same namespace as the CertificateRequest will be used.  If the 'kind' field is set to 'ClusterIssuer', a ClusterIssuer with the provided name will be used. The 'name' field in this stanza is required at all times. The group field refers to the API group of the issuer which defaults to 'cert-manager.io' if empty.
   *
   * @schema CertificateRequestSpec#issuerRef
   */
  readonly issuerRef: CertificateRequestSpecIssuerRef;

  /**
   * Usages is the set of x509 usages that are requested for the certificate. Defaults to `digital signature` and `key encipherment` if not specified.
   *
   * @default digital signature` and `key encipherment` if not specified.
   * @schema CertificateRequestSpec#usages
   */
  readonly usages?: CertificateRequestSpecUsages[];

}

/**
 * IssuerRef is a reference to the issuer for this CertificateRequest.  If the 'kind' field is not set, or set to 'Issuer', an Issuer resource with the given name in the same namespace as the CertificateRequest will be used.  If the 'kind' field is set to 'ClusterIssuer', a ClusterIssuer with the provided name will be used. The 'name' field in this stanza is required at all times. The group field refers to the API group of the issuer which defaults to 'cert-manager.io' if empty.
 *
 * @schema CertificateRequestSpecIssuerRef
 */
export interface CertificateRequestSpecIssuerRef {
  /**
   * Group of the resource being referred to.
   *
   * @schema CertificateRequestSpecIssuerRef#group
   */
  readonly group?: string;

  /**
   * Kind of the resource being referred to.
   *
   * @schema CertificateRequestSpecIssuerRef#kind
   */
  readonly kind?: string;

  /**
   * Name of the resource being referred to.
   *
   * @schema CertificateRequestSpecIssuerRef#name
   */
  readonly name: string;

}

/**
 * KeyUsage specifies valid usage contexts for keys. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3      https://tools.ietf.org/html/rfc5280#section-4.2.1.12 Valid KeyUsage values are as follows: "signing", "digital signature", "content commitment", "key encipherment", "key agreement", "data encipherment", "cert sign", "crl sign", "encipher only", "decipher only", "any", "server auth", "client auth", "code signing", "email protection", "s/mime", "ipsec end system", "ipsec tunnel", "ipsec user", "timestamping", "ocsp signing", "microsoft sgc", "netscape sgc"
 *
 * @schema CertificateRequestSpecUsages
 */
export enum CertificateRequestSpecUsages {
  /** signing */
  SIGNING = "signing",
  /** digital signature */
  DIGITAL_SIGNATURE = "digital signature",
  /** content commitment */
  CONTENT_COMMITMENT = "content commitment",
  /** key encipherment */
  KEY_ENCIPHERMENT = "key encipherment",
  /** key agreement */
  KEY_AGREEMENT = "key agreement",
  /** data encipherment */
  DATA_ENCIPHERMENT = "data encipherment",
  /** cert sign */
  CERT_SIGN = "cert sign",
  /** crl sign */
  CRL_SIGN = "crl sign",
  /** encipher only */
  ENCIPHER_ONLY = "encipher only",
  /** decipher only */
  DECIPHER_ONLY = "decipher only",
  /** any */
  ANY = "any",
  /** server auth */
  SERVER_AUTH = "server auth",
  /** client auth */
  CLIENT_AUTH = "client auth",
  /** code signing */
  CODE_SIGNING = "code signing",
  /** email protection */
  EMAIL_PROTECTION = "email protection",
  /** s/mime */
  S_MIME = "s/mime",
  /** ipsec end system */
  IPSEC_END_SYSTEM = "ipsec end system",
  /** ipsec tunnel */
  IPSEC_TUNNEL = "ipsec tunnel",
  /** ipsec user */
  IPSEC_USER = "ipsec user",
  /** timestamping */
  TIMESTAMPING = "timestamping",
  /** ocsp signing */
  OCSP_SIGNING = "ocsp signing",
  /** microsoft sgc */
  MICROSOFT_SGC = "microsoft sgc",
  /** netscape sgc */
  NETSCAPE_SGC = "netscape sgc",
}

